% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{Test_IIGPP_Fit}
\alias{Test_IIGPP_Fit}
\title{Calculates Posterior P-values for IIGPP Models}
\usage{
Test_IIGPP_Fit(
  X,
  n,
  Results,
  basis_degree,
  boundary_knots,
  internal_knots,
  end_time,
  time_inhomogeneous = TRUE,
  burnin_prop = 0.2
)
}
\arguments{
\item{X}{List of vectors containing the ISIs of one of the two (A or B) single stimulus trials}

\item{n}{Vector containing number of spikes for each one spike train corresponding to X}

\item{Results}{List produced from running \code{Sampler_IIGPP} for one of the two (A or B) single stimulus trials}

\item{basis_degree}{Integer indicating the degree of B-splines (3 for cubic splines)}

\item{boundary_knots}{Vector of two elements specifying the boundary knots}

\item{internal_knots}{Vector containing the desired internal knots of the B-splines}

\item{end_time}{Double containing the end of the experimental window (experimental window assumed [0, end_time])}

\item{time_inhomogeneous}{Boolean containing whether or not a time-inhomogeneous model should be used (if false then basis_degree, boundary_knots, and internal_knots can take any value of the correct type)}

\item{burnin_prop}{Double containing proportion of MCMC samples that should be discarded due to MCMC burn-in (Note burnin_prop includes warm-up iterations)}
}
\value{
List containing:
\describe{
  \item{\code{p_val}}{Posterior predictive p-value using average log-likelihood as the discrepency variable}
  \item{\code{p_val_mean_SC}}{Posterior predictive p-value using the mean of the spike counts as the discrepency variable}
  \item{\code{p_val_var_SC}}{Posterior predictive p-value using the variance of the spike counts as the discrepency variable}
}
}
\description{
This function calculates the posterior p-value using different discrepency variables.
Specifically, this function uses the the following discrepency variables: (1) Average 
Log-Likelihood, (2) Mean of the Spike Counts, and (3) Variance of the Spike Counts. Using these
three discrepancy variables, this function calculates posterior p-values which
calculate the discrepency between the fitted model and the observed spike trains.
}
\section{Warning}{

The following must be true:
\describe{
  \item{\code{basis_degree}}{must be an integer larger than or equal to 1}
  \item{\code{internal_knots}}{must lie in the range of \code{boundary_knots}}
  \item{\code{burnin_prop}}{must be greater than or equal to 0 and less than 1}
  \item{\code{end_time}}{must be larger than 0 and all spike times must be before end_time}
}
}

\examples{
##############################
### Time-Homogeneous Model ###
##############################

## Load sample data
dat <- readRDS(system.file("test-data", "time_homogeneous_sample_dat.RDS",
               package = "NeuralComp"))

## set parameters
MCMC_iters <- 100
basis_degree <- 3
boundary_knots <- c(0, 1)
internal_knots <- c(0.25, 0.5, 0.75)
end_time <- 1

## Warm Blocks should be longer, however for the example, they are short
Warm_block1 = 50
Warm_block2 = 50

## Run MCMC chain
results <- Sampler_IIGPP(dat$X_A, dat$n_A, MCMC_iters, basis_degree, boundary_knots, 
                         internal_knots, end_time, Warm_block1 = Warm_block1,
                         Warm_block2 = Warm_block2, time_inhomogeneous = FALSE)

posterior_p_val <- Test_IIGPP_Fit(dat$X_A, dat$n_A, results, basis_degree,
                                  boundary_knots, internal_knots, end_time,
                                  time_inhomogeneous = FALSE)


################################
### Time-Inhomogeneous Model ###
################################

## Load sample data
dat <- readRDS(system.file("test-data", "time_inhomogeneous_sample_dat.RDS",
               package = "NeuralComp"))

## set parameters
MCMC_iters <- 100
basis_degree <- 3
boundary_knots <- c(0, 1)
internal_knots <- c(0.25, 0.5, 0.75)
end_time <- 1

## Warm Blocks should be longer, however for the example, they are short
Warm_block1 = 50
Warm_block2 = 50

## Run MCMC chain
results <- Sampler_IIGPP(dat$X_A, dat$n_A, MCMC_iters, basis_degree, boundary_knots, 
                         internal_knots, end_time, Warm_block1 = Warm_block1,
                         Warm_block2 = Warm_block2)

posterior_p_val <- Test_IIGPP_Fit(dat$X_A, dat$n_A, results, basis_degree,
                                  boundary_knots, internal_knots, end_time)

}
