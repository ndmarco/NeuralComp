// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/NeuralComp.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getBSpline
arma::mat getBSpline(const arma::vec time, const int basis_degree, const arma::vec boundary_knots, const arma::vec internal_knots);
RcppExport SEXP _NeuralComp_getBSpline(SEXP timeSEXP, SEXP basis_degreeSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(getBSpline(time, basis_degree, boundary_knots, internal_knots));
    return rcpp_result_gen;
END_RCPP
}
// Sampler_Competition
Rcpp::List Sampler_Competition(const arma::field<arma::vec> X_A, const arma::field<arma::vec> X_B, const arma::field<arma::vec> X_AB, const arma::vec n_A, const arma::vec n_B, const arma::vec n_AB, int MCMC_iters, const int basis_degree, const arma::vec boundary_knots, const arma::vec internal_knots, bool time_inhomogeneous, int Warm_block1, int Warm_block2, int Leapfrog_steps, const double I_A_mean, const double I_A_shape, const double I_B_mean, const double I_B_shape, const double sigma_A_mean, const double sigma_A_shape, const double sigma_B_mean, const double sigma_B_shape, const double delta_shape, const double delta_rate, double step_size_theta, double step_size_FR, double delta_proposal_mean, double delta_proposal_sd, double alpha_labels, double alpha, double beta, int delta_adaption_block, int Mass_adaption_block, int M_proposal);
RcppExport SEXP _NeuralComp_Sampler_Competition(SEXP X_ASEXP, SEXP X_BSEXP, SEXP X_ABSEXP, SEXP n_ASEXP, SEXP n_BSEXP, SEXP n_ABSEXP, SEXP MCMC_itersSEXP, SEXP basis_degreeSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP, SEXP time_inhomogeneousSEXP, SEXP Warm_block1SEXP, SEXP Warm_block2SEXP, SEXP Leapfrog_stepsSEXP, SEXP I_A_meanSEXP, SEXP I_A_shapeSEXP, SEXP I_B_meanSEXP, SEXP I_B_shapeSEXP, SEXP sigma_A_meanSEXP, SEXP sigma_A_shapeSEXP, SEXP sigma_B_meanSEXP, SEXP sigma_B_shapeSEXP, SEXP delta_shapeSEXP, SEXP delta_rateSEXP, SEXP step_size_thetaSEXP, SEXP step_size_FRSEXP, SEXP delta_proposal_meanSEXP, SEXP delta_proposal_sdSEXP, SEXP alpha_labelsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP delta_adaption_blockSEXP, SEXP Mass_adaption_blockSEXP, SEXP M_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X_AB(X_ABSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n_A(n_ASEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n_B(n_BSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n_AB(n_ABSEXP);
    Rcpp::traits::input_parameter< int >::type MCMC_iters(MCMC_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type time_inhomogeneous(time_inhomogeneousSEXP);
    Rcpp::traits::input_parameter< int >::type Warm_block1(Warm_block1SEXP);
    Rcpp::traits::input_parameter< int >::type Warm_block2(Warm_block2SEXP);
    Rcpp::traits::input_parameter< int >::type Leapfrog_steps(Leapfrog_stepsSEXP);
    Rcpp::traits::input_parameter< const double >::type I_A_mean(I_A_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type I_A_shape(I_A_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type I_B_mean(I_B_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type I_B_shape(I_B_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_A_mean(sigma_A_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_A_shape(sigma_A_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_B_mean(sigma_B_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_B_shape(sigma_B_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_shape(delta_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_rate(delta_rateSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_theta(step_size_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_FR(step_size_FRSEXP);
    Rcpp::traits::input_parameter< double >::type delta_proposal_mean(delta_proposal_meanSEXP);
    Rcpp::traits::input_parameter< double >::type delta_proposal_sd(delta_proposal_sdSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_labels(alpha_labelsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type delta_adaption_block(delta_adaption_blockSEXP);
    Rcpp::traits::input_parameter< int >::type Mass_adaption_block(Mass_adaption_blockSEXP);
    Rcpp::traits::input_parameter< int >::type M_proposal(M_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(Sampler_Competition(X_A, X_B, X_AB, n_A, n_B, n_AB, MCMC_iters, basis_degree, boundary_knots, internal_knots, time_inhomogeneous, Warm_block1, Warm_block2, Leapfrog_steps, I_A_mean, I_A_shape, I_B_mean, I_B_shape, sigma_A_mean, sigma_A_shape, sigma_B_mean, sigma_B_shape, delta_shape, delta_rate, step_size_theta, step_size_FR, delta_proposal_mean, delta_proposal_sd, alpha_labels, alpha, beta, delta_adaption_block, Mass_adaption_block, M_proposal));
    return rcpp_result_gen;
END_RCPP
}
// Sampler_IGP
Rcpp::List Sampler_IGP(const arma::field<arma::vec> X, const arma::vec n, int MCMC_iters, const int basis_degree, const arma::vec boundary_knots, const arma::vec internal_knots, bool time_inhomogeneous, int Warm_block1, int Warm_block2, int Leapfrog_steps, const double I_mean, const double I_shape, const double sigma_mean, const double sigma_shape, double step_size_theta, double step_size_FR, double alpha, double beta, int Mass_adaption_block, int M_proposal);
RcppExport SEXP _NeuralComp_Sampler_IGP(SEXP XSEXP, SEXP nSEXP, SEXP MCMC_itersSEXP, SEXP basis_degreeSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP, SEXP time_inhomogeneousSEXP, SEXP Warm_block1SEXP, SEXP Warm_block2SEXP, SEXP Leapfrog_stepsSEXP, SEXP I_meanSEXP, SEXP I_shapeSEXP, SEXP sigma_meanSEXP, SEXP sigma_shapeSEXP, SEXP step_size_thetaSEXP, SEXP step_size_FRSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP Mass_adaption_blockSEXP, SEXP M_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type MCMC_iters(MCMC_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type time_inhomogeneous(time_inhomogeneousSEXP);
    Rcpp::traits::input_parameter< int >::type Warm_block1(Warm_block1SEXP);
    Rcpp::traits::input_parameter< int >::type Warm_block2(Warm_block2SEXP);
    Rcpp::traits::input_parameter< int >::type Leapfrog_steps(Leapfrog_stepsSEXP);
    Rcpp::traits::input_parameter< const double >::type I_mean(I_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type I_shape(I_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_mean(sigma_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_shape(sigma_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_theta(step_size_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_FR(step_size_FRSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type Mass_adaption_block(Mass_adaption_blockSEXP);
    Rcpp::traits::input_parameter< int >::type M_proposal(M_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(Sampler_IGP(X, n, MCMC_iters, basis_degree, boundary_knots, internal_knots, time_inhomogeneous, Warm_block1, Warm_block2, Leapfrog_steps, I_mean, I_shape, sigma_mean, sigma_shape, step_size_theta, step_size_FR, alpha, beta, Mass_adaption_block, M_proposal));
    return rcpp_result_gen;
END_RCPP
}
// FR_CI_IGP
Rcpp::List FR_CI_IGP(const arma::vec time, const int basis_degree, const arma::vec boundary_knots, const arma::vec internal_knots, const arma::mat basis_coef_samp, const arma::mat theta, const double burnin_prop, const double alpha);
RcppExport SEXP _NeuralComp_FR_CI_IGP(SEXP timeSEXP, SEXP basis_degreeSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP, SEXP basis_coef_sampSEXP, SEXP thetaSEXP, SEXP burnin_propSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type basis_coef_samp(basis_coef_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(FR_CI_IGP(time, basis_degree, boundary_knots, internal_knots, basis_coef_samp, theta, burnin_prop, alpha));
    return rcpp_result_gen;
END_RCPP
}
// FR_CI_Competition
Rcpp::List FR_CI_Competition(const arma::vec time, const int basis_degree, const arma::vec boundary_knots, const arma::vec internal_knots, const arma::mat basis_coef_A_samp, const arma::mat basis_coef_B_samp, const arma::mat theta, const double burnin_prop, const double alpha);
RcppExport SEXP _NeuralComp_FR_CI_Competition(SEXP timeSEXP, SEXP basis_degreeSEXP, SEXP boundary_knotsSEXP, SEXP internal_knotsSEXP, SEXP basis_coef_A_sampSEXP, SEXP basis_coef_B_sampSEXP, SEXP thetaSEXP, SEXP burnin_propSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type basis_degree(basis_degreeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type boundary_knots(boundary_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type internal_knots(internal_knotsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type basis_coef_A_samp(basis_coef_A_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type basis_coef_B_samp(basis_coef_B_sampSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type burnin_prop(burnin_propSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(FR_CI_Competition(time, basis_degree, boundary_knots, internal_knots, basis_coef_A_samp, basis_coef_B_samp, theta, burnin_prop, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _NeuralComp_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _NeuralComp_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _NeuralComp_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _NeuralComp_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// dinv_gauss
double dinv_gauss(const double x, const double& mean, const double& shape);
RcppExport SEXP _NeuralComp_dinv_gauss(SEXP xSEXP, SEXP meanSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(dinv_gauss(x, mean, shape));
    return rcpp_result_gen;
END_RCPP
}
// pinv_gauss
double pinv_gauss(const double x, const double& mean, const double& shape);
RcppExport SEXP _NeuralComp_pinv_gauss(SEXP xSEXP, SEXP meanSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_gauss(x, mean, shape));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_test
double dnorm_test(arma::vec& prop_momentum);
RcppExport SEXP _NeuralComp_dnorm_test(SEXP prop_momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type prop_momentum(prop_momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_test(prop_momentum));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NeuralComp_getBSpline", (DL_FUNC) &_NeuralComp_getBSpline, 4},
    {"_NeuralComp_Sampler_Competition", (DL_FUNC) &_NeuralComp_Sampler_Competition, 34},
    {"_NeuralComp_Sampler_IGP", (DL_FUNC) &_NeuralComp_Sampler_IGP, 20},
    {"_NeuralComp_FR_CI_IGP", (DL_FUNC) &_NeuralComp_FR_CI_IGP, 8},
    {"_NeuralComp_FR_CI_Competition", (DL_FUNC) &_NeuralComp_FR_CI_Competition, 9},
    {"_NeuralComp_rcpparma_hello_world", (DL_FUNC) &_NeuralComp_rcpparma_hello_world, 0},
    {"_NeuralComp_rcpparma_outerproduct", (DL_FUNC) &_NeuralComp_rcpparma_outerproduct, 1},
    {"_NeuralComp_rcpparma_innerproduct", (DL_FUNC) &_NeuralComp_rcpparma_innerproduct, 1},
    {"_NeuralComp_rcpparma_bothproducts", (DL_FUNC) &_NeuralComp_rcpparma_bothproducts, 1},
    {"_NeuralComp_dinv_gauss", (DL_FUNC) &_NeuralComp_dinv_gauss, 3},
    {"_NeuralComp_pinv_gauss", (DL_FUNC) &_NeuralComp_pinv_gauss, 3},
    {"_NeuralComp_dnorm_test", (DL_FUNC) &_NeuralComp_dnorm_test, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_NeuralComp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
