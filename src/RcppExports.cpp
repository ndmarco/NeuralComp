// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/NeuralComp.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// HMC
arma::mat HMC(arma::field<arma::vec> Labels, const arma::field<arma::vec> X_A, const arma::field<arma::vec> X_B, const arma::field<arma::vec> X_AB, const arma::vec n_A, const arma::vec n_B, const arma::vec n_AB, int MCMC_iters, int Warm_block, Rcpp::Nullable<Rcpp::NumericVector> init_position, int Leapfrog_steps, const double I_A_shape, const double I_A_rate, const double I_B_shape, const double I_B_rate, const double sigma_A_mean, const double sigma_A_shape, const double sigma_B_mean, const double sigma_B_shape, const double delta_shape, const double delta_rate, Rcpp::Nullable<Rcpp::NumericVector> eps_step, double step_size, double step_size_delta, Rcpp::Nullable<Rcpp::NumericMatrix> Mass_mat);
RcppExport SEXP _NeuralComp_HMC(SEXP LabelsSEXP, SEXP X_ASEXP, SEXP X_BSEXP, SEXP X_ABSEXP, SEXP n_ASEXP, SEXP n_BSEXP, SEXP n_ABSEXP, SEXP MCMC_itersSEXP, SEXP Warm_blockSEXP, SEXP init_positionSEXP, SEXP Leapfrog_stepsSEXP, SEXP I_A_shapeSEXP, SEXP I_A_rateSEXP, SEXP I_B_shapeSEXP, SEXP I_B_rateSEXP, SEXP sigma_A_meanSEXP, SEXP sigma_A_shapeSEXP, SEXP sigma_B_meanSEXP, SEXP sigma_B_shapeSEXP, SEXP delta_shapeSEXP, SEXP delta_rateSEXP, SEXP eps_stepSEXP, SEXP step_sizeSEXP, SEXP step_size_deltaSEXP, SEXP Mass_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type Labels(LabelsSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X_A(X_ASEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X_B(X_BSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec> >::type X_AB(X_ABSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n_A(n_ASEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n_B(n_BSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type n_AB(n_ABSEXP);
    Rcpp::traits::input_parameter< int >::type MCMC_iters(MCMC_itersSEXP);
    Rcpp::traits::input_parameter< int >::type Warm_block(Warm_blockSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type init_position(init_positionSEXP);
    Rcpp::traits::input_parameter< int >::type Leapfrog_steps(Leapfrog_stepsSEXP);
    Rcpp::traits::input_parameter< const double >::type I_A_shape(I_A_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type I_A_rate(I_A_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type I_B_shape(I_B_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type I_B_rate(I_B_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_A_mean(sigma_A_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_A_shape(sigma_A_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_B_mean(sigma_B_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_B_shape(sigma_B_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_shape(delta_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_rate(delta_rateSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type eps_step(eps_stepSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_delta(step_size_deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type Mass_mat(Mass_matSEXP);
    rcpp_result_gen = Rcpp::wrap(HMC(Labels, X_A, X_B, X_AB, n_A, n_B, n_AB, MCMC_iters, Warm_block, init_position, Leapfrog_steps, I_A_shape, I_A_rate, I_B_shape, I_B_rate, sigma_A_mean, sigma_A_shape, sigma_B_mean, sigma_B_shape, delta_shape, delta_rate, eps_step, step_size, step_size_delta, Mass_mat));
    return rcpp_result_gen;
END_RCPP
}
// arma_cov_est
arma::mat arma_cov_est(arma::mat X);
RcppExport SEXP _NeuralComp_arma_cov_est(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_cov_est(X));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _NeuralComp_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _NeuralComp_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _NeuralComp_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _NeuralComp_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// dinv_gauss
double dinv_gauss(const double x, const double& mean, const double& shape);
RcppExport SEXP _NeuralComp_dinv_gauss(SEXP xSEXP, SEXP meanSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(dinv_gauss(x, mean, shape));
    return rcpp_result_gen;
END_RCPP
}
// pinv_gauss
double pinv_gauss(const double x, const double& mean, const double& shape);
RcppExport SEXP _NeuralComp_pinv_gauss(SEXP xSEXP, SEXP meanSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_gauss(x, mean, shape));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_test
double dnorm_test(arma::vec& prop_momentum);
RcppExport SEXP _NeuralComp_dnorm_test(SEXP prop_momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type prop_momentum(prop_momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_test(prop_momentum));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NeuralComp_HMC", (DL_FUNC) &_NeuralComp_HMC, 25},
    {"_NeuralComp_arma_cov_est", (DL_FUNC) &_NeuralComp_arma_cov_est, 1},
    {"_NeuralComp_rcpparma_hello_world", (DL_FUNC) &_NeuralComp_rcpparma_hello_world, 0},
    {"_NeuralComp_rcpparma_outerproduct", (DL_FUNC) &_NeuralComp_rcpparma_outerproduct, 1},
    {"_NeuralComp_rcpparma_innerproduct", (DL_FUNC) &_NeuralComp_rcpparma_innerproduct, 1},
    {"_NeuralComp_rcpparma_bothproducts", (DL_FUNC) &_NeuralComp_rcpparma_bothproducts, 1},
    {"_NeuralComp_dinv_gauss", (DL_FUNC) &_NeuralComp_dinv_gauss, 3},
    {"_NeuralComp_pinv_gauss", (DL_FUNC) &_NeuralComp_pinv_gauss, 3},
    {"_NeuralComp_dnorm_test", (DL_FUNC) &_NeuralComp_dnorm_test, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_NeuralComp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
